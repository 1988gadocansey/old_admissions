
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewBag.Title = "Upload Profile Picture";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Style{
    <script src="~/assets/js/jquery.min.js"></script>

    <script src="~/assets/js/jquery-ui.min.js"></script>

    <link rel="stylesheet" href="~/assets/css/jquery-ui.css" media="all">
}

@if (TempData["message"] != null)
{

    @if (TempData["type"].ToString() == "success")
    {
        <div style="text-align: center" class="uk-alert uk-alert-success" data-uk-alert=""> @TempData["message"]  </div>

    }
    else
    {

        <div style="text-align: center" class="uk-alert uk-alert-danger" data-uk-alert=""> @TempData["message"]  </div>

    }
}

@*<partial name="_StatusMessages" />*@
  

    <div align="center">
        @{ var user = await UserManager.GetUserAsync(User); }
        
        <form id="form" method="POST" enctype="multipart/form-data" asp-controller="Upload" asp-action="Upload" accept-charset="utf-8" name="applicationForm" v-form>
            @Html.AntiForgeryToken()

            <div class="uk-width-small-1-2">

                <div class="md-card">
                    <div class="md-card-content">
                        <h3 class="heading_a uk-margin-small-bottom uk-text-danger">
                            Upload White Background Passport Picture here. Only (.JPG .JPEG) are allowed.Maximum size 250KB.
                        </h3>




                        <input type="file" accept="image/jpeg" id="input-file-e" required="" name="file" v-model="file" v-form-ctrl="" class="dropify" data-max-file-size="200000K" />
                    </div>
                </div>


                <div class="uk-grid">
                    <div class="uk-width-1-1">
                        <input type="submit" v-show="applicationForm.$valid" class="md-btn md-btn-primary" value="upload" />
                    </div>

                </div>

                @if ((user.PictureUploaded) == 1)
                {

                    <a class="md-btn   md-btn-primary uk-margin-small-top" asp-area="" asp-controller="Form" asp-action="Create">Start Application</a>


                }


            </div>

        </form>

    </div>


    @section Scripts{

        <script>$(document).ready(function () {
                $("#form").on("submit", function (event) {
                    event.preventDefault();
                    UIkit.modal.alert('Uploading Picture...');
                    $(event.target).unbind("submit").submit();


                });




            });</script>
        <script>async function AJAXSubmit(oFormElement) {
                var resultElement = oFormElement.elements.namedItem("result");
                const formData = new FormData(oFormElement);

                try {
                    const response = await fetch(oFormElement.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        window.location.href = '/';
                    }

                    resultElement.value = 'Result: ' + response.status + ' ' +
                        response.statusText;
                } catch (error) {
                    console.error('Error:', error);
                }
            }</script>
        <script src="~/assets/js/select2.full.min.js"></script>
        <script>$(document).ready(function () {
                $('select').select2({ width: "resolve" });


            });</script>

        <script>//code for ensuring vuejs can work with select2 select boxes
            Vue.directive('select', {
                twoWay: true,
                priority: 1000,
                params: ['options'],
                bind: function () {
                    var self = this
                    $(this.el)
                        .select2({
                            data: this.params.options,
                            width: "resolve"
                        })
                        .on('change', function () {
                            self.vm.$set(this.name, this.value)
                            Vue.set(self.vm.$data, this.name, this.value)
                        })
                },
                update: function (newValue, oldValue) {
                    $(this.el).val(newValue).trigger('change')
                },
                unbind: function () {
                    $(this.el).off().select2('destroy')
                }
            })


            var vm = new Vue({
                el: "body",
                ready: function () {
                },
                data: {


                    options: []

                },

            })</script>

    }
